lm(y-x)
options(error = recover)
read.csv("nosuchfile")
read.csv("nosuchfile")
read.csv("nosuchfile")
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)?
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
cls_vect
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,
| 19:23]
flag_shapes <- flags[,19:23]
View(flags)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
s <-tapply(mtcars$hp, mtcars$cyl, mean)
abs(s[1]-s[3])
debug(ls)
install.packages("pryr")
f <- function(x) x^2
f
formals(f)
body(f)
environment(f)
sum
formals(sum)
body(sum)
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
f <- function() {
x <- 1
y <- 2
c(x, y)
}
rm(f)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
j(6)
rm(j, k)
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
m()
rm(l, m)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
j()
j()
j()
rm(j)
f <- function() x
x <- 15
f()
x <- 20
f()
f()
f <- function() x + 1
codetools::findGlobals(f)
environment(f) <- emptyenv()
f()
environment(f) <- emptyenv()
f()
`(` <- function(e1) {
if (is.numeric(e1) && runif(1) < 0.1) {
e1 + 1
} else {
e1
}
}
replicate(50,(1+2))
rm(f,'(',x)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
rm(f)
x <- 10; y <- 5
x + y
`+`(x, y)
for (i in 1:2) print(i)
for (i in 1:6) print(i)
`for`(i, 1:2, print(i))
if (i == 1) print("yes!") else print("no.")
x[3]
`[`(x, 3)
sapply(1:5, `+`, 3)
sapply(1:5, "+", 3)
rm()
rm(tmp)
tmp <- 1:4
rm(tmp)
rm(list = ls())
x <- list(1:3, 4:9, 10:12)
sapply(x, "[", 2)
x
sapply(x, function(x) x[2])
rm(list = ls())
f <- function(abcdef, bcde1, bcde2) {
list(a = abcdef, b1 = bcde1, b2 = bcde2)
}
str(f(1, 2, 3))
mean(1:10)
mean(1:10, trim = 0.05)
mean(x = 1:10)
mean(1:10, n = T)
mean(1:10, , FALSE)
mean(1:10, 0.05)
mean(, TRUE, x = c(1:10, NA))
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]](10)
rm(list = ls())
add <- function(x) {
force(x)
function(y) x + y
}
add()
add(5)
adders2 <- lapply(1:10, add)
View(adders2)
adders2
adders2[[1]](10)
adders2[[10]](10)
library(forecast)
install.packages("Rserve")
library(Rserve)
Rserve()
install.packages("Forecast")
install.packages("forecast")
library(igraph)
install.packages("igraph")
install.packages("survey")
install.packages("plyr")
install.packages("mvoutlier")
rm(list = ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
source('D:/OneDrive - Universidad de Los Andes/Google Drive Back Up/032016/Academico/Coursera/Data Science Specialization/R Programming/WD/W3/PA2/PA_Matrix_Inverse.R', echo=TRUE)
rm(list = ls())
source('D:/OneDrive - Universidad de Los Andes/Google Drive Back Up/032016/Academico/Coursera/Data Science Specialization/R Programming/WD/W3/PA2/Mean.R', echo=TRUE)
debug(makeVector)
makeVector(1:10)
nnnnn
debug(cachemean)
a <- makeVector(1:10)
debug(cachemean)
cachemean(a)
x
a <- makeVector(1:30)
n
cachemean(a)
cachemean(a)
mean(6,7)
cachemean(a)
rm(list = ls())
source('D:/OneDrive - Universidad de Los Andes/Google Drive Back Up/032016/Academico/Coursera/Data Science Specialization/R Programming/WD/W3/PA2/PA_Matrix_Inverse.R', echo=TRUE)
mat <- matrix(1:4,2,2)
mat
f <- makeMatrix(mat)
cachemean(f)
cachemean(f)
solve(mat)
rm(list = ls())
str(str)
str(lm)
str(ls)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,10)
str(f)
library(datasets)
head(airquality)
str(airquality)
matrix(rnorm(100),10,10)
m<-matrix(rnorm(100),10,10)
str(m)
m
s < split(airquality,airquality$Month)
s <- split(airquality,airquality$Month)
str(s)
library(RODBC)
install.packages("ROBDC")
rm(list = ls())
ls()
x <- rnorm(10)
x
x <- rnorm(10,20,2)
x
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
rpois(10,2)
rpois(10,20)
ppois(2,2)
ppois(4,2)
ppois(6,2)
rm(list = ls())
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
rm(list = ls())
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
rm(list = ls())
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5+0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
rm(list = ls())
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace = true)
sample(1:10, replace = TRUE)
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {i<- 1:n }
hilbert <- function(n) {
i<- 1:n
1/outer(i-1,i,"+")
}
str(hilbert)
hilbert <- function(n) {
i<- 1:n
1/outer(i-1,i,"+")
}
x <- hilbert(1000)
system.time(svd(x))
## lm(y ~ x)
lm(y ~ x)
sample.interval = 1000
sample.interval=1000
## lm(y ~ x)
sample.interval=1000
$by.total
rm(list = ls())
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)\
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,nrow(10))
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(C(0,1),100,replace = TRUE,prob = C(0.3,0.7))
sample(C(0,1),100,replace = TRUE,prob = C(0.3,0.7))
sample(c(0,1),100)
sample(c(0,1),100,replace = TRUE)
sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
print(flips)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5,lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist,y = cars$speed)
plot(x = cars$speed, y = cars$dist,xlab = "Speed")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance", main = "My Plot",sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col =2)
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance", main = "My Plot",sub = "My Plot Subtitle", col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl,data = mtcars)
hist(mtcars$mpg)
library(ggplot2)
install.packages("lattice")
install.packages("ape")
install.packages("ade")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("shiny")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
set.seed(1)
rpois(5, 2)
x -> "Hello"
x <- "Hello"
x[1]
x[[1]]
length(x)
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user = "genome", host = "genome-mysql.cse.ucsc,edu")
ucscDb <- dbConnect(MySQL(),user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;")
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),user = "genome",db = "hg19", host = "genome-mysql.cse.ucsc.edu")
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
View(affyData)
View(affyData)
query <- dbSendQuery(hg19,"select * from  affyU133Plus2 where misMatches between 1 and 3")
warnings()
affyMis <- fetch(query)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10)
dbClearResult(query)
dim(affyMisSmall)
dim(affyMis)
?fetch
dbDisconnect(hg19)
dbDisconnect(ucscDb)
dbDisconnect(hg19)
source("http://bioconductor.org/bioclite.R")
source("http://bioconductor.org/bioclite.R/")
source("http:////bioconductor.org//bioclite.R//")
source("http://bioconductor.org/biocLite.R/")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
setwd("D:/OneDrive - Universidad de Los Andes/Google Drive Back Up/032016/Academico/Coursera/Data Science Specialization/Getting and Cleaning Data/Git_Getting_and_Cleaning_Data")
created <- h5createFile("example.h5")
created
created  = h5createGroup("example.h5","foo")
created  = h5createGroup("example.h5","baa")
created  = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(httr)
library(RODBC)
install.packages("RODBC")
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
rm(list = ls())
?oauth_app
library(rjson)
install.packages("rjson")
library(rjson)
install.packages("httpuv")
source('D:/OneDrive - Universidad de Los Andes/Google Drive Back Up/032016/Academico/Coursera/Data Science Specialization/Getting and Cleaning Data/Git_Getting_and_Cleaning_Data/W2_Q2.R', echo=TRUE)
library(sqldf)
getwd()
ls()
rm(list = ls())
dir()
acs <- read.csv("W2_Question2.csv")
str(acs)
str(acs)
names(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
